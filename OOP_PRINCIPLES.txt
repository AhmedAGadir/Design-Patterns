Object Oriented Basics:
- Abstraction
- Inheritance
- Polymorphism
- Encapsulation 

Object Oriented Principles:

1. Identify the aspects of your application that vary and seperate them from what stays the same
this results in fewer unintended consequences from code changes and more flexibility in your systems

2. Program to a supertype (interfaces and abstract super classes), not a concrete class type
delare your variable type using their supertype (e.g. type 'Animal' instead of type 'Dog')
then use methods available on said supertype, and not ones only available on the concrete class
this creates more flexible code

e.g.

class Animal { makeSound() { /* abstract method */ }}
class Dog { makeSound() { this.bark() } bark() { console.log('bark')} }
class Cat { makeSound() { this.meow() } meow() { console.log('meow')} }

doing things this way:

Animal foo = new Cat();
foo.makeSound() // meow

is better than doing things this way:
Cat foo = new Cat();
foo.meow() // meow

3. Favour composition over inheritence
passing class references around can often be much better than using inheritance 
said references can be passed in constructors or methods etc.
( a lot, if not all, of the design patterns studied apply this principle)

4. Strive for loosely coupled designs between objects that interact
from HFDP: "Observers are loosely coupled in that the Observable knows nothing about them, other than that they implement the Observer interface"

5. Open/Closed Principle: Classes should be open for extension, but closed for modification 
think decorator pattern, factory method pattern etc.
this stops code from breaking, however it is impossible to achieve everywhwere

6. Dependancy Inversion Principle: depend upon abstractions (interfaces and abstract super classes), do not depend upon concrete classes
(very similar to #2 'program to a supertype');
"it suggests that our high-level components should not depend our our low-level components, rather they should both depend on abstractions"
high-level components (classes that use other classes inside them) should declare types as interfaces (not concrete classes) and use methods available on those interfaces (not only available on the concrete classes)
low-level components should be structured so that methods on the supertype are used (see #2)

