Definition: 
Ensures a class has only one instance and provides a global point of access to instance

how it works: 
- the constructor in the Singleton is private
- a static method is used to instantiate a single class and return it (this works as only methods within a class can have access to private methods/variables)

Some applications can actually run into all sorts of bugs if there are more than one instance of a class
e.g. thread pools, caches, dialog boxes, objects that handle preferences and registry settings, objects that are used for logging and objects that act as device drivers to devices like printers and graphic cards
ingletons are obviously useful for applications that

its good to note that Singletons are also more performant than global variables as they will only be instantiated when needed,
as opposed to being instantiated when the application begins (lazy vs. eager instantiation)

The main reason you shouldnt use it is:
Many people argue that this pattern shouldnt actually be used.
- whos to say that youll only ever need a single instance of a class - "one mans constant is another mans variable"

is this breaking the single responsibility principle as the Singleton will have 3 responsibilities:
1 - behaving as the global access point to the Single instance of the singleton
2 - ensuring that only one instance of the Singleton exists in the programme 
3 - doing whatever the Singleton is intended for (e.g. chatroom etc)

there are also some stuff to do with threading and singletons that i skipped in the HFDP book